version: "3.9"

# LOCAL DEV

services:
  api:
    container_name: api
    user: 1000:1000
    build:
      context: app/api/
      dockerfile: Dockerfile.dev
    env_file: app/api/.env
    environment:
      - POSTGRES_HOST=db
    ports:
      - 5000:5000
    command: uvicorn api.main.app:api --reload --host=0.0.0.0 --port=5000 --log-config=api/logger_config.yaml
    volumes:
      # Mount local codebase to reflect changes for local dev
      - ./app/api:/app/api
    healthcheck:
      test: ["CMD", "curl", "localhost:5000/api/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - migs
      - migssanctuary
      - testapi
      - seeder

  migs:
    container_name: migs
    build:
      context: app/api/
      dockerfile: Dockerfile.dev
    env_file: app/api/.env
    environment:
      - POSTGRES_HOST=db
    command: bash -c "cd /app/api && alembic --name=medical upgrade head"
    volumes:
      # Mount local codebase to reflect changes for local dev
      - ./app/api:/app/api
    depends_on:
      db:
        condition: service_healthy

  migssanctuary:
    container_name: migssanctuary
    build:
      context: app/api/
      dockerfile: Dockerfile.dev
    env_file: app/api/.env
    environment:
      - POSTGRES_HOST=db
    command: bash -c "cd /app/api && alembic --name=sanctuary upgrade head"
    volumes:
      # Mount local codebase to reflect changes for local dev
      - ./app/api:/app/api
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: db
    user: postgres
    image: postgres:13.2-alpine
    restart: always
    env_file: app/api/.env
    environment:
      - POSTGRES_HOST=db
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh


  testapi:
    container_name: testapi
    user: 1000:1000
    build:
      context: app/api/
      dockerfile: Dockerfile.dev
    env_file: app/api/.env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=example_test
    # run as module so basedir (root) is added to python path
    command: python -m pytest api/tests/
    volumes:
      - ./app/api/:/app/api
    depends_on:
      - migs

  seeder:
    container_name: seeder
    user: 1000:1000
    build:
      context: app/api/
      dockerfile: seeder/Dockerfile.seed
    env_file: app/api/.env
    tty: true
    environment:
      - POSTGRES_HOST=db
    volumes:
      - ./app/api/:/app/api
    command: python -m api.seeder.seed_database
    depends_on:
      - testapi

  web:
    container_name: web
    user: node
    build:
      context: app/web/
      dockerfile: Dockerfile.dev
    volumes:
      - ./app/web:/code
    ports:
      - 3000:3000
    depends_on:
      - api

  # Used for deploying artifacts or data to Google Cloud
  webprod:
    container_name: webprod
    user: node
    command: yarn build && tail -f /dev/null
    build:
      context: app/web/
      dockerfile: Dockerfile.dev
    volumes:
      - ./app/web/contexts:/code/contexts
      - ./app/web/pages:/code/pages
      - ./app/web/public:/code/public
      - ./app/web/styles:/code/styles
      - ./app/web/utils:/code/utils

  migsprod:
    container_name: migsprod
    build:
      context: app/api/
      dockerfile: .Dockerfile.prod
    env_file: app/api/.env
    volumes:
      # Mount local codebase to reflect changes for local dev
      - ./app/api:/app/api
    command: bash -c "cd /app/api && alembic --name=medical upgrade head"

  #PRODUCTION IMAGE VERIFICATION

  apitarget:
    container_name: apitarget
    user: 1000:1000
    build:
      context: app/api/
      dockerfile: Dockerfile.prod
    env_file: app/api/.env
    environment:
      - POSTGRES_HOST=db
    ports:
      - 5000:5000
    command: uvicorn api.main.app:api --reload --host=0.0.0.0 --port=5000 --log-config=api/logger_config.yaml
    healthcheck:
      test: ["CMD", "curl", "localhost:5000/api/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - migstarget
      - testapitarget

  migstarget:
    container_name: migstarget
    build:
      context: app/api
      dockerfile: Dockerfile.prod
    env_file: app/api/.env
    environment:
      - POSTGRES_HOST=db
    command: bash -c "cd /app/api && alembic -name=medical upgrade head"
    depends_on:
      db:
        condition: service_healthy

  testapitarget:
    container_name: testapitarget
    user: 1000:1000
    build:
      context: app/api
      dockerfile: Dockerfile.prod
    env_file: app/api/.env
    environment:
      - POSTGRES_HOST=db
    #run as module so basedir (root) is added to python path
    command: python -m pytest api/tests/
    depends_on:
      - migstarget

  webtarget:
    container_name: webtarget
    user: node
    build:
      context: app/web/
      dockerfile: Dockerfile.prod
    ports:
      - 3000:3000
    depends_on:
      - apitarget

networks:
  default:
    driver: "bridge"
